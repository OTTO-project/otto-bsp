From 1c9168d77d025d862ea2d20873b4e0a15194ca4a Mon Sep 17 00:00:00 2001
From: jmidt <jonatan.midtgaard@gmail.com>
Date: Thu, 27 Aug 2020 18:25:23 +0200
Subject: [PATCH] Added support for ST7789V

---
 CMakeLists.txt |   4 ++
 config.h       |   6 +-
 display.h      |   2 +
 st7789v.cpp    | 154 +++++++++++++++++++++++++++++++++++++++++++++++++
 st7789v.h      |  35 +++++++++++
 5 files changed, 198 insertions(+), 3 deletions(-)
 create mode 100644 st7789v.cpp
 create mode 100644 st7789v.h

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 235c70f..0dd4eea 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -226,6 +226,9 @@ elseif(ST7789)
 elseif(ST7789VW)
 	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DST7789 -DST7789VW")
 	message(STATUS "Targeting ST7789VW (based as variant of ST7789)")
+elseif(ST7789V)
+	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DST7789V")
+	message(STATUS "Targeting ST7789V")
 elseif(ST7735R)
 	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DST7735R")
 	message(STATUS "Targeting ST7735R")
@@ -266,3 +269,4 @@ endif()
 add_executable(fbcp-ili9341 ${sourceFiles})
 
 target_link_libraries(fbcp-ili9341 pthread bcm_host atomic)
+target_link_libraries(fbcp-ili9341 vchostif)
diff --git a/config.h b/config.h
index afa2104..62073d4 100644
--- a/config.h
+++ b/config.h
@@ -146,7 +146,7 @@
 
 // Detects when the activity on the screen is mostly idle, and goes to low power mode, in which new
 // frames will be polled first at 10fps, and ultimately at only 2fps.
-#define SAVE_BATTERY_BY_SLEEPING_WHEN_IDLE
+//#define SAVE_BATTERY_BY_SLEEPING_WHEN_IDLE
 
 // Builds a histogram of observed frame intervals and uses that to sync to a known update rate. This aims
 // to detect if an application uses a non-60Hz update rate, and synchronizes to that instead.
@@ -202,14 +202,14 @@
 
 // If enabled, reads keyboard for input events to detect when the system has gone inactive and backlight
 // can be turned off
-#define BACKLIGHT_CONTROL_FROM_KEYBOARD
+//#define BACKLIGHT_CONTROL_FROM_KEYBOARD
 
 // This device file is used to capture keyboard input. This may be "/dev/input/event0" or something else
 // on some Pis
 #define KEYBOARD_INPUT_FILE "/dev/input/event1"
 
 // If enabled, the display backlight will be turned off after this many usecs of no activity on screen.
-#define TURN_DISPLAY_OFF_AFTER_USECS_OF_INACTIVITY (1 * 60 * 1000000)
+//#define TURN_DISPLAY_OFF_AFTER_USECS_OF_INACTIVITY (1 * 60 * 1000000)
 
 #endif
 
diff --git a/display.h b/display.h
index ff0bd72..52bc2ae 100644
--- a/display.h
+++ b/display.h
@@ -17,6 +17,8 @@
 #include "hx8357d.h"
 #elif defined(ST7735R) || defined(ST7735S) || defined(ST7789) || defined(ST7789VW)
 #include "st7735r.h"
+#elif defined(ST7789V)
+#include "st7789v.h"
 #elif defined(SSD1351)
 #include "ssd1351.h"
 #elif defined(MZ61581)
diff --git a/st7789v.cpp b/st7789v.cpp
new file mode 100644
index 0000000..c70ff13
--- /dev/null
+++ b/st7789v.cpp
@@ -0,0 +1,154 @@
+#include "config.h"
+
+#include "spi.h"
+
+#include <memory.h>
+#include <stdio.h>
+
+void InitST7735R()
+{
+    // If a Reset pin is defined, toggle it briefly high->low->high to enable the device. Some devices do not have a reset pin, in which case compile with GPIO_TFT_RESET_PIN left undefined.
+    #if defined(GPIO_TFT_RESET_PIN) && GPIO_TFT_RESET_PIN >= 0
+        printf("Resetting display at reset GPIO pin %d\n", GPIO_TFT_RESET_PIN);
+        SET_GPIO_MODE(GPIO_TFT_RESET_PIN, 1);
+        SET_GPIO(GPIO_TFT_RESET_PIN);
+        usleep(120 * 1000);
+        CLEAR_GPIO(GPIO_TFT_RESET_PIN);
+        usleep(120 * 1000);
+        SET_GPIO(GPIO_TFT_RESET_PIN);
+        usleep(120 * 1000);
+    #endif
+
+    // Do the initialization with a very low SPI bus speed, so that it will succeed even if the bus speed chosen by the user is too high.
+    spi->clk = 34;
+    __sync_synchronize();
+
+    BEGIN_SPI_COMMUNICATION();
+    {
+    // Like for the ST7789VW, ST7789V does not want to accept the Software Reset command, but screen stays black if SWRESET is sent to it.
+    //SPI_TRANSFER(0x01/*Software Reset*/);
+
+    usleep(120*1000);
+    SPI_TRANSFER(0x11/*Sleep Out*/);
+    usleep(120 * 1000);
+    // On the ST7789VW, this was disabled because it was observed to look visually bad, makes colors a bit too contrasty/deep
+    //SPI_TRANSFER(0x26/*Gamma Curve Select*/, 0x04/*Gamma curve 3 (2.5x if GS=1, 2.2x otherwise)*/);
+
+    SPI_TRANSFER(0x3A/*COLMOD: Pixel Format Set*/, 0x05/*16bpp*/);
+    usleep(20 * 1000);
+
+    #define MADCTL_BGR_PIXEL_ORDER (1<<3)
+    #define MADCTL_ROW_COLUMN_EXCHANGE (1<<5)
+    #define MADCTL_COLUMN_ADDRESS_ORDER_SWAP (1<<6)
+    #define MADCTL_ROW_ADDRESS_ORDER_SWAP (1<<7)
+    #define MADCTL_ROTATE_180_DEGREES (MADCTL_COLUMN_ADDRESS_ORDER_SWAP | MADCTL_ROW_ADDRESS_ORDER_SWAP)
+
+        uint8_t madctl = 0;
+    #ifdef DISPLAY_SWAP_BGR
+        madctl ^= MADCTL_BGR_PIXEL_ORDER;
+    #endif
+    #if defined(DISPLAY_FLIP_ORIENTATION_IN_HARDWARE)
+        madctl |= MADCTL_ROW_COLUMN_EXCHANGE;
+    #endif
+
+        madctl |= MADCTL_ROW_ADDRESS_ORDER_SWAP;
+
+
+    #ifdef DISPLAY_ROTATE_180_DEGREES
+        madctl ^= MADCTL_ROTATE_180_DEGREES;
+    #endif
+
+        SPI_TRANSFER(0x36/*MADCTL: Memory Access Control*/, madctl);
+        usleep(10*1000);
+
+        SPI_TRANSFER(0xBA/*DGMEN: Enable Gamma*/, 0x04);
+        bool invertColors = true;
+
+    #ifdef DISPLAY_INVERT_COLORS
+        invertColors = !invertColors;
+    #endif
+
+    if (invertColors) { SPI_TRANSFER(0x21/*Display Inversion On*/); }
+    else { SPI_TRANSFER(0x20/*Display Inversion Off*/); }
+
+    SPI_TRANSFER(0x13/*NORON: Partial off (normal)*/);
+    usleep(10*1000);
+
+
+    // TODO: The 0xB1 command is not Frame Rate Control for ST7789VW, 0xB3 is. 
+    // Support is still TODO for both controllers
+
+
+    SPI_TRANSFER(/*Display ON*/0x29);
+    usleep(100 * 1000);
+
+    #if 0
+        // TODO: ST7789VW Python example suggests following, check them against datasheet if there's anything interesting
+        SPI_TRANSFER(0xB2, 0xc, 0xc, 0, 0x33, 0x33);
+        SPI_TRANSFER(0xB7, 0x35);
+        SPI_TRANSFER(0xBb, 0x19);
+        SPI_TRANSFER(0xc0, 0x2c);
+        SPI_TRANSFER(0xc2, 0x01);
+        SPI_TRANSFER(0xc3, 0x12);
+        SPI_TRANSFER(0xc4, 0x20);
+        SPI_TRANSFER(0xc6, 0x0f);
+        SPI_TRANSFER(0xd0, 0xa4, 0xa1);
+        SPI_TRANSFER(0xe0, 0xd0, 0x04, 0x0d, 0x11, 0x13, 0x2b, 0x3f, 0x54, 0x4c, 0x18, 0x0d, 0x0b, 0x1f, 0x23);
+        SPI_TRANSFER(0xe1, 0xd0, 0x04, 0x0c, 0x11, 0x13, 0x2c, 0x3f, 0x44, 0x51, 0x2f, 0x1f, 0x1f, 0x20, 0x23);
+        SPI_TRANSFER(0x21);
+        SPI_TRANSFER(0x11);
+        SPI_TRANSFER(0x29);
+        usleep(100 * 1000);
+    #endif
+
+    #if defined(GPIO_TFT_BACKLIGHT) && defined(BACKLIGHT_CONTROL)
+        printf("Setting TFT backlight on at pin %d\n", GPIO_TFT_BACKLIGHT);
+        SET_GPIO_MODE(GPIO_TFT_BACKLIGHT, 0x01); // Set backlight pin to digital 0/1 output mode (0x01) in case it had been PWM controlled
+        SET_GPIO(GPIO_TFT_BACKLIGHT); // And turn the backlight on.
+    #endif
+
+    ClearScreen();
+  }
+
+    #ifndef USE_DMA_TRANSFERS // For DMA transfers, keep SPI CS & TA active.
+    END_SPI_COMMUNICATION();
+    #endif
+
+  // And speed up to the desired operation speed finally after init is done.
+  usleep(10 * 1000); // Delay a bit before restoring CLK, or otherwise this has been observed to cause the display not init if done back to back after the clear operation above.
+  spi->clk = SPI_BUS_CLOCK_DIVISOR;
+}
+
+void TurnDisplayOff()
+{
+    #if defined(GPIO_TFT_BACKLIGHT) && defined(BACKLIGHT_CONTROL)
+    SET_GPIO_MODE(GPIO_TFT_BACKLIGHT, 0x01); // Set backlight pin to digital 0/1 output mode (0x01) in case it had been PWM controlled
+    CLEAR_GPIO(GPIO_TFT_BACKLIGHT); // And turn the backlight off.
+    #endif
+    #if 0
+    QUEUE_SPI_TRANSFER(0x28/*Display OFF*/);
+    QUEUE_SPI_TRANSFER(0x10/*Enter Sleep Mode*/);
+    usleep(120*1000); // Sleep off can be sent 120msecs after entering sleep mode the earliest, so synchronously sleep here for that duration to be safe.
+    #endif
+    //  printf("Turned display OFF\n");
+}
+
+void TurnDisplayOn()
+{
+    #if 0
+    QUEUE_SPI_TRANSFER(0x11/*Sleep Out*/);
+    usleep(120 * 1000);
+    QUEUE_SPI_TRANSFER(0x29/*Display ON*/);
+    #endif
+    #if defined(GPIO_TFT_BACKLIGHT) && defined(BACKLIGHT_CONTROL)
+    SET_GPIO_MODE(GPIO_TFT_BACKLIGHT, 0x01); // Set backlight pin to digital 0/1 output mode (0x01) in case it had been PWM controlled
+    SET_GPIO(GPIO_TFT_BACKLIGHT); // And turn the backlight on.
+    #endif
+    //  printf("Turned display ON\n");
+}
+
+void DeinitSPIDisplay()
+{
+  ClearScreen();
+}
+
diff --git a/st7789v.h b/st7789v.h
new file mode 100644
index 0000000..3613ee2
--- /dev/null
+++ b/st7789v.h
@@ -0,0 +1,35 @@
+#pragma once
+
+#if defined(ST7789V)
+
+// On Arduino "A000096" 160x128 ST7735R LCD Screen, the following speed configurations have been tested (on a Pi 3B):
+// core_freq=355: CDIV=6, results in 59.167MHz, works
+// core_freq=360: CDIV=6, would result in 60.00MHz, this would work for several minutes, but then the display would turn all white at random
+
+// On Adafruit 1.54" 240x240 Wide Angle TFT LCD Display with MicroSD ST7789 screen, the following speed configurations have been tested (on a Pi 3B):
+// core_freq=340: CDIV=4, results in 85.00MHz, works
+// core_freq=350: CDIV=4, would result in 87.50MHz, which would work for a while, but generate random single pixel glitches every once in a few minutes
+
+// Data specific to the ILI9341 controller
+#define DISPLAY_SET_CURSOR_X 0x2A
+#define DISPLAY_SET_CURSOR_Y 0x2B
+#define DISPLAY_WRITE_PIXELS 0x2C
+
+#define DISPLAY_NATIVE_WIDTH 240
+#define DISPLAY_NATIVE_HEIGHT 320
+
+#else
+#error Unknown display controller!
+#endif
+
+#define InitSPIDisplay InitST7735R
+
+void InitST7735R(void);
+void DeinitSPIDisplay(void);
+
+void TurnDisplayOn(void);
+void TurnDisplayOff(void);
+
+// TODO: It is actually untested if ST7789V really needs this, but does work with it, so kept for now
+#define DISPLAY_NEEDS_CHIP_SELECT_SIGNAL
+
